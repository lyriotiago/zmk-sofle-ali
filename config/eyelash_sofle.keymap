#define CONFIG_ZMK_POINTING y
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500 // 60
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 30   // 10


#include <behaviors.dtsi>

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#include <input/processors.dtsi>


&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <0>;
    acceleration-exponent = <0>;
    delay-ms = <0>;
};


/ {
    macros {
        next_word: next_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp RIGHT_ARROW>
                , <&macro_release &kp LCTRL>
                ;
        };
        prev_word: prev_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp LEFT_ARROW>
                , <&macro_release &kp LCTRL>
                ;
        };
        mute_unmute: mute_unmute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp M>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp LCTRL>
                ;
        };
        draw_arrow: draw_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp MINUS>
                , <&macro_tap &kp GREATER_THAN>
                ;
        };
        code_console: code_console {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp GRAVE>
                , <&macro_release &kp LCTRL>
                ;
        };
        code_comment: code_comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp FSLH>
                , <&macro_release &kp LCTRL>
                ;
        };
        run_cell: run_cell {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp ENTER>
                , <&macro_release &kp LSHFT>
                ;
        };
        run_same_cell: run_same_cell {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp ENTER>
                , <&macro_release &kp LCTRL>
                ;
        };
        scroll_up: scroll_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &msc SCRL_UP>
                ;
        };
        scroll_down: scroll_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &msc SCRL_DOWN>
                ;
        };
        undo: undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp Z>
                , <&macro_release &kp LCTRL>
                ;
        };
        redo: redo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp Y>
                , <&macro_release &kp LCTRL>
                ;
        };
        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp X>
                , <&macro_release &kp LCTRL>
                ;
        };
        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp C>
                , <&macro_release &kp LCTRL>
                ;
        };
        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp V>
                , <&macro_release &kp LCTRL>
                ;
        };
        select_word: select_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp RIGHT_ARROW>
                , <&macro_release &kp LCTRL>
                , <&macro_press &kp LSHFT>
                , <&macro_press &kp LCTRL>
                , <&macro_tap &kp LEFT_ARROW>
                , <&macro_release &kp LCTRL>
                , <&macro_release &kp LSHFT>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";


        combo_code_console {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&code_console>;
            layers = <0>;
        };
        combo_code_comment {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&code_comment>;
            layers = <0>;
        };


        combo_plus {
            timeout-ms = <50>;
            key-positions = <9 10>;
            bindings = <&kp PLUS>;
            layers = <0>;
        };
        combo_under {
            timeout-ms = <50>;
            key-positions = <35 36>;
            bindings = <&kp UNDER>;
            layers = <0>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <48 49>;
            bindings = <&kp MINUS>;
            layers = <0>;
        };
        combo_arrow {
            timeout-ms = <50>;
            key-positions = <49 50>;
            bindings = <&draw_arrow>;
            layers = <0>;
        };


        combo_LPAR {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp LPAR>;
            layers = <0>;
        };
        combo_LEFT_BRACKET {
            timeout-ms = <30>;
            key-positions = <23 24>;
            bindings = <&kp LEFT_BRACKET>;
            layers = <0>;
        };
        combo_LBRC {
            timeout-ms = <50>;
            key-positions = <36 37>;
            bindings = <&kp LBRC>;
            layers = <0>;
        };


        combo_del {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp DELETE>;
            layers = <0>;
        };

        combo_APOS {
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp APOS>;
            layers = <0>;
        };

        combo_COLON {
            timeout-ms = <50>;
            key-positions = <37 38>;
            bindings = <&kp COLON>;
            layers = <0>;
        };
        combo_run_cell {
            timeout-ms = <50>;
            key-positions = <50 51>;
            bindings = <&run_cell>;
            layers = <0>;
        };


        combo_to2 {
            timeout-ms = <50>;
            key-positions = <60 61>;
            bindings = <&to 2>;
            layers = <0>;
        };


        combo_EQUAL {
            timeout-ms = <50>;
            key-positions = <62 63>;
            bindings = <&kp EQUAL>;
            layers = <0>;
        };

    };

    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;     // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;     // 0
            time-to-max-speed-ms = <1>;      // 500
            delay-ms = <0>;                  // 10
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc MOVE_Y(-50)>, <&msc MOVE_Y(50)>;

            tap-ms = <50>;
        };

        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUD>, <&rgb_ug RGB_HUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1           &kp N2        &kp N3        &kp N4        &kp N5                         &kp UP_ARROW                   &kp N6      &kp N7     &kp N8           &kp N9           &kp N0      &kp BACKSPACE
&kp TAB     &kp Q            &kp W         &kp E         &kp R         &kp T                          &kp DOWN_ARROW                 &kp Y       &kp U      &kp I            &kp O            &kp P       &kp BSLH
&kp DELETE  &kp A            &kp S         &kp D         &kp F         &kp G                          &kp LEFT_ARROW                 &kp H       &kp J      &kp K            &kp L            &kp SEMI    &kp APOS
&kp LSHFT   &kp Z            &kp X         &kp C         &kp V         &kp B                          &kp RIGHT_ARROW                &kp N       &kp M      &kp COMMA        &kp DOT          &kp FSLH    &kp ENTER
            &mute_unmute     &kp LEFT_ALT  &kp LEFT_GUI  &kp LCTRL     &mo 1        &kp SPACE         &kp ENTER          &kp SPACE   &mo 1       &kp RSHFT  &prev_word       &next_word
            >;

            sensor-bindings = <&scroll_encoder>;
            display-name = "QWERTY";
        };

        layer_1 {
            bindings = <
&code_console  &kp F1       &kp F2           &kp F3        &kp F4    &kp F5              &kp PG_UP                       &kp F6       &kp F7         &kp F8      &kp LPAR           &kp RPAR           &kp PLUS
&kp K_SLEEP    &kp GRAVE    &kp F9           &kp F10       &kp F11   &kp F12             &kp PG_DN                       &kp PG_UP    &kp UP         &kp HOME    &kp LEFT_BRACKET   &kp RIGHT_BRACKET  &kp MINUS
&trans         &kp TILDE    &trans           &select_word  &trans    &trans              &kp HOME                        &kp LEFT     &kp DOWN       &kp RIGHT   &kp LBRC           &kp RBRC           &kp UNDER
&redo          &undo        &cut             &copy         &paste    &trans              &kp END                         &kp PG_DN    &kp INSERT     &kp END     &kp LESS_THAN      &kp GREATER_THAN   &kp EQUAL
               &kp C_MUTE   &kp PRINTSCREEN  &kp CAPSLOCK  &trans    &trans   &trans     &kp INSERT        &select_word  &trans       &kp ASTERISK   &kp FSLH    &draw_arrow
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "Symbol";
        };

        layer_2 {
            bindings = <
&to 0       &bt BT_SEL 0   &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                      &mmv MOVE_UP                 &kp F6           &kp N7     &kp N8     &kp N9    &kp PLUS      &to 0
&trans      &bt BT_CLR     &bt BT_CLR_ALL   &mkp MB4         &mkp RGB_BRI     &RGB_BRD                          &mmv MOVE_DOWN               &msc SCRL_UP     &kp N4     &kp N5     &kp N6    &kp MINUS     &sys_reset
&trans      &out OUT_USB   &out OUT_BLE     &trans           &rgb_ug RGB_SPI  &rgb_ug RGB_SPD                   &mmv MOVE_LEFT               &msc SCRL_DOWN   &kp N1     &kp N2     &kp N3    &kp ASTERISK  &soft_off
&trans      &sys_reset     &trans           &bootloader      &rgb_ug RGB_SAI  &rgb_ug RGB_SAD                   &mmv MOVE_RIGHT              &trans           &kp COMMA  &kp N0     &kp DOT   &kp FSLH      &bootloader
            &kp C_MUTE     &rgb_ug RGB_OFF  &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_TOG  &mkp LCLK        &mkp LCLK   &mkp RCLK        &to 0      &kp ENTER  &kp EQUAL
            >;
 
            sensor-bindings = <&rgb_encoder>;
            display-name = "Config";
        };
    };
};