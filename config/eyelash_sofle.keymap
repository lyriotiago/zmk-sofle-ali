#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20 // 10

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#include <input/processors.dtsi>

/*
&mmv_input_listener {
    input-processors = <&zip_xy_scaler 2 1>;
};

&msc_input_listener {
    input-processors = <&zip_xy_scaler 2 1>;
};
*/

/*
        mmv {
            acceleration-exponent = <1>;     // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                  // 0
        };

        msc {
            delay-ms = <0>;                  // 0
            acceleration-exponent = <1>;     // 0
            time-to-max-speed-ms = <1>;      // 300
        };
*/

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 60
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10


/ {
    macros {
        next_word: next_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp RIGHT_ARROW>
                , <&macro_release &kp LCTRL>
                ;
        };
        prev_word: prev_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp LEFT_ARROW>
                , <&macro_release &kp LCTRL>
                ;
        };
        mute_unmute: mute_unmute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp M>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp LCTRL>
                ;
        };
        draw_arrow: draw_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp MINUS>
                , <&macro_tap &kp GREATER_THAN>
                ;
        };
        code_console: code_console {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp GRAVE>
                , <&macro_release &kp LCTRL>
                ;
        };
        code_comment: code_comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp FSLH>
                , <&macro_release &kp LCTRL>
                ;
        };
        run_cell: run_cell {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp ENTER>
                , <&macro_release &kp LSHFT>
                ;
        };
        scroll_up: scroll_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &msc SCRL_UP>
                ;
        };
        scroll_down: scroll_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &msc SCRL_DOWN>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_del {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp DELETE>;
        };
        combo_arrow {
            timeout-ms = <50>;
            key-positions = <48 49>;
            bindings = <&draw_arrow>;
        };
        combo_run_cell {
            timeout-ms = <50>;
            key-positions = <50 51>;
            bindings = <&run_cell>;
        };
        combo_code_comment {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&code_comment>;
        };
        combo_code_console {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&code_console>;
        };
    };

    behaviors {

        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <30>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1           &kp N2        &kp N3        &kp N4        &kp N5                         &kp UP_ARROW                   &kp N6      &kp N7     &kp N8           &kp N9           &kp N0      &kp BACKSPACE
&kp TAB     &kp Q            &kp W         &kp E         &kp R         &kp T                          &kp DOWN_ARROW                 &kp Y       &kp U      &kp I            &kp O            &kp P       &kp BSLH
&mo 1       &kp A            &kp S         &kp D         &kp F         &kp G                          &kp LEFT_ARROW                 &kp H       &kp J      &kp K            &kp L            &kp SEMI    &kp APOS
&kp LSHFT   &kp Z            &kp X         &kp C         &kp V         &kp B                          &kp RIGHT_ARROW                &kp N       &kp M      &kp COMMA        &kp DOT          &kp FSLH    &kp ENTER
            &mute_unmute     &kp LCTRL     &kp LEFT_GUI  &kp LEFT_ALT  &mo 1        &kp SPACE         &kp ENTER          &kp SPACE   &kp ENTER   &to 2      &prev_word       &next_word
            >;

            sensor-bindings = <&scroll_encoder>;
            display-name = "QWERY";
        };

        layer_1 {
            bindings = <
&code_console  &kp F1           &kp F2           &kp F3           &kp F4           &kp F5                        &scroll_up                  &kp F6       &kp F7         &kp F8      &kp F9      &kp LPAR          &kp RPAR
&trans         &kp GRAVE        &kp F10          &kp F11          &kp F12          &trans                        &scroll_down                &kp PG_UP    &kp UP         &kp HOME    &kp PLUS    &kp LEFT_BRACKET  &kp RIGHT_BRACKET 
&trans         &kp TILDE        &trans           &trans           &trans           &trans                        &kp prev_word                  &kp LEFT     &kp DOWN       &kp RIGHT   &kp UNDER   &kp LBRC          &kp RBRC
&kp K_SLEEP    &rgb_ug RGB_OFF  &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI               &kp next_word                  &kp PG_DN    &kp INSERT     &kp END     &kp MINUS   &kp LESS_THAN     &kp GREATER_THAN
               &kp C_MUTE       &kp PRINTSCREEN  &kp CAPSLOCK     &trans           &trans             &trans     &kp INSERT        &kp EQUAL    &kp EQUAL    &kp ASTERISK   &kp FSLH    &draw_arrow
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "Symbol";
        };

        layer_2 {
            bindings = <
&to 0       &bt BT_SEL 0   &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                      &rgb_ug RGB_BRI              &kp F6     &kp N7     &kp N8     &kp N9    &kp PLUS      &to 0
&trans      &bt BT_CLR     &bt BT_CLR_ALL   &mkp MB4         &mkp MB5         &trans                            &rgb_ug RGB_BRD              &trans     &kp N4     &kp N5     &kp N6    &kp MINUS     &sys_reset
&trans      &out OUT_USB   &out OUT_BLE     &trans           &rgb_ug RGB_SPI  &rgb_ug RGB_SPD                   &rgb_ug RGB_HUI              &trans     &kp N1     &kp N2     &kp N3    &kp ASTERISK  &soft_off
&trans      &sys_reset     &trans           &bootloader      &rgb_ug RGB_SAI  &rgb_ug RGB_SAD                   &rgb_ug RGB_HUD              &trans     &kp COMMA  &kp N0     &kp DOT   &kp FSLH      &bootloader
            &kp C_MUTE     &rgb_ug RGB_OFF  &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_TOG  &mkp LCLK        &kp SPACE   &kp ENTER  &to 0      &kp ENTER  &kp EQUAL
            >;
 
            sensor-bindings = <&scroll_encoder>;
            display-name = "Config";
        };
    };
};